name: Build and deploy

on:
  push:
    branches:
      - cicd
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker-build:
    if: |
      !contains(github.event.head_commit.message, 'skip build')
    permissions: write-all
    runs-on: ubicloud-standard-16
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare build
        run: |
          echo "SANITIZED_REF=$(echo "${GITHUB_REF##*/}" | tr '/' '-' | tr -d '.')" >> $GITHUB_ENV

      - id: commit
        uses: prompt/actions-commit-hash@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./evaluator
          push: true
          file: evaluator/Dockerfile
          tags: |
            ghcr.io/renlabs-dev/prediction-swarm-evaluator:${{ steps.commit.outputs.short }}
            ghcr.io/renlabs-dev/prediction-swarm-evaluator:${{ env.SANITIZED_REF }}

  clean-stale:
    runs-on: ubicloud-standard-2
    container:
      image: ghcr.io/renlabs-dev/devops-ci:latest

    env:
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
      VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}

    steps:
      - name: Setup Kubernetes authentication
        run: /apps/k8s_auth_w_approle_sa.sh

      - name: Clean stale releases
        run: |
          /apps/clean_stale_releases.sh torus-prod-prediction-swarm

  deploy:
    needs: [docker-build, clean-stale]
    if: |
      always() &&
      (needs.clean-stale.result == 'success') &&
      (needs.docker-build.result == 'success' || needs.docker-build.result == 'skipped')
    runs-on: ubicloud-standard-2
    container:
      image: ghcr.io/renlabs-dev/devops-ci:latest

    env:
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
      VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
      APP_NAME: evaluator

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Kubernetes authentication
        run: /apps/k8s_auth_w_approle_sa.sh

      - name: Add and update Helm repositories
        run: |
          helm repo add renlabs https://charts.renlabs.dev/
          helm repo update

      - id: commit
        uses: prompt/actions-commit-hash@v3

      - name: Set environment variables
        run: |
          echo "ENV_NAME=prod" >> $GITHUB_ENV
          echo "NAMESPACE=torus-prod-prediction-swarm" >> $GITHUB_ENV

      - name: Install shared resources
        run: |
          helm template torus-${ENV_NAME}-aux \
            -f helm/values-utils.yaml \
            -n ${NAMESPACE} \
            --set environmentName=${ENV_NAME} \
            renlabs/utils | kubectl apply -f -

      - name: Deploy application (new tag)
        id: deploy-new
        if: needs.docker-build.result == 'success'
        working-directory: ${{ env.APP_NAME }}
        run: |
          helmfile sync -e ${ENV_NAME} --set deployment.image.tag=${{ steps.commit.outputs.short }}

      - name: Install helm diff plugin
        if: needs.docker-build.result == 'skipped'
        working-directory: ${{ env.APP_NAME }}
        run: |
          if ! helm plugin list | grep -q '^diff'; then
            helm plugin install https://github.com/databus23/helm-diff
          fi

      - name: Deploy application (apply diff only)
        id: deploy-diff
        if: needs.docker-build.result == 'skipped'
        working-directory: ${{ env.APP_NAME }}
        run: |
          export RELEASE_NAME="$(helmfile -e ${ENV_NAME} list --output json | jq -r '.[].name')"
          export IMAGE_TAG="$(helm get values "${RELEASE_NAME}" -n "${NAMESPACE}" --output json | jq -r '.deployment.image.tag')"

          # Temporarily disable error handling
          set +e
          helmfile diff -e ${ENV_NAME} --set deployment.image.tag=${IMAGE_TAG} --detailed-exitcode
          DIFF_EXIT_CODE=$?

          # Re-enable error handling
          set -eo pipefail

          if [ "$DIFF_EXIT_CODE" == "0" ]; then
            echo "No changes detected, skipping sync"
            echo "changes_applied=false" >> $GITHUB_OUTPUT
          elif [ "$DIFF_EXIT_CODE" == "2" ]; then
            echo "Changes detected, applying updates..."
            helmfile sync -e ${ENV_NAME} --set deployment.image.tag=${IMAGE_TAG}
            echo "changes_applied=true" >> $GITHUB_OUTPUT
          else
            echo "Error running helmfile diff with exit code: $DIFF_EXIT_CODE"
            exit 1
          fi